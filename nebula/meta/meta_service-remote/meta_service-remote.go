// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
        "../../github.com/vesoft-inc/nebula-go/nebula/meta"
)

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  ExecResp createSpace(CreateSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropSpace(DropSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  GetSpaceResp getSpace(GetSpaceReq req)")
  fmt.Fprintln(os.Stderr, "  ListSpacesResp listSpaces(ListSpacesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createTag(CreateTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterTag(AlterTagReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropTag(DropTagReq req)")
  fmt.Fprintln(os.Stderr, "  GetTagResp getTag(GetTagReq req)")
  fmt.Fprintln(os.Stderr, "  ListTagsResp listTags(ListTagsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createEdge(CreateEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterEdge(AlterEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropEdge(DropEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  GetEdgeResp getEdge(GetEdgeReq req)")
  fmt.Fprintln(os.Stderr, "  ListEdgesResp listEdges(ListEdgesReq req)")
  fmt.Fprintln(os.Stderr, "  ListHostsResp listHosts(ListHostsReq req)")
  fmt.Fprintln(os.Stderr, "  GetPartsAllocResp getPartsAlloc(GetPartsAllocReq req)")
  fmt.Fprintln(os.Stderr, "  ListPartsResp listParts(ListPartsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp multiPut(MultiPutReq req)")
  fmt.Fprintln(os.Stderr, "  GetResp get(GetReq req)")
  fmt.Fprintln(os.Stderr, "  MultiGetResp multiGet(MultiGetReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp remove(RemoveReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp removeRange(RemoveRangeReq req)")
  fmt.Fprintln(os.Stderr, "  ScanResp scan(ScanReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createTagIndex(CreateTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropTagIndex(DropTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  GetTagIndexResp getTagIndex(GetTagIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListTagIndexesResp listTagIndexes(ListTagIndexesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp rebuildTagIndex(RebuildIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListIndexStatusResp listTagIndexStatus(ListIndexStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createEdgeIndex(CreateEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropEdgeIndex(DropEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  GetEdgeIndexResp getEdgeIndex(GetEdgeIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListEdgeIndexesResp listEdgeIndexes(ListEdgeIndexesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp rebuildEdgeIndex(RebuildIndexReq req)")
  fmt.Fprintln(os.Stderr, "  ListIndexStatusResp listEdgeIndexStatus(ListIndexStatusReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createUser(CreateUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropUser(DropUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp alterUser(AlterUserReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp grantRole(GrantRoleReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp revokeRole(RevokeRoleReq req)")
  fmt.Fprintln(os.Stderr, "  ListUsersResp listUsers(ListUsersReq req)")
  fmt.Fprintln(os.Stderr, "  ListRolesResp listRoles(ListRolesReq req)")
  fmt.Fprintln(os.Stderr, "  ListRolesResp getUserRoles(GetUserRolesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp changePassword(ChangePasswordReq req)")
  fmt.Fprintln(os.Stderr, "  HBResp heartBeat(HBReq req)")
  fmt.Fprintln(os.Stderr, "  BalanceResp balance(BalanceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp leaderBalance(LeaderBalanceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp regConfig(RegConfigReq req)")
  fmt.Fprintln(os.Stderr, "  GetConfigResp getConfig(GetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp setConfig(SetConfigReq req)")
  fmt.Fprintln(os.Stderr, "  ListConfigsResp listConfigs(ListConfigsReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp createSnapshot(CreateSnapshotReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropSnapshot(DropSnapshotReq req)")
  fmt.Fprintln(os.Stderr, "  ListSnapshotsResp listSnapshots(ListSnapshotsReq req)")
  fmt.Fprintln(os.Stderr, "  AdminJobResp runAdminJob(AdminJobReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addZone(AddZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropZone(DropZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addHostIntoZone(AddHostIntoZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropHostFromZone(DropHostFromZoneReq req)")
  fmt.Fprintln(os.Stderr, "  GetZoneResp getZone(GetZoneReq req)")
  fmt.Fprintln(os.Stderr, "  ListZonesResp listZones(ListZonesReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addGroup(AddGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropGroup(DropGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addZoneIntoGroup(AddZoneIntoGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp dropZoneFromGroup(DropZoneFromGroupReq req)")
  fmt.Fprintln(os.Stderr, "  GetGroupResp getGroup(GetGroupReq req)")
  fmt.Fprintln(os.Stderr, "  ListGroupsResp listGroups(ListGroupsReq req)")
  fmt.Fprintln(os.Stderr, "  CreateBackupResp createBackup(CreateBackupReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp restoreMeta(RestoreMetaReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp addListener(AddListenerReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp removeListener(RemoveListenerReq req)")
  fmt.Fprintln(os.Stderr, "  ListListenerResp listListener(ListListenerReq req)")
  fmt.Fprintln(os.Stderr, "  GetStatisResp getStatis(GetStatisReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp signInFTService(SignInFTServiceReq req)")
  fmt.Fprintln(os.Stderr, "  ExecResp signOutFTService(SignOutFTServiceReq req)")
  fmt.Fprintln(os.Stderr, "  ListFTClientsResp listFTClients(ListFTClientsReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.Transport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.ProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := meta.NewMetaServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "createSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSpace requires 1 args")
      flag.Usage()
    }
    arg376 := flag.Arg(1)
    mbTrans377 := thrift.NewMemoryBufferLen(len(arg376))
    defer mbTrans377.Close()
    _, err378 := mbTrans377.WriteString(arg376)
    if err378 != nil {
      Usage()
      return
    }
    factory379 := thrift.NewSimpleJSONProtocolFactory()
    jsProt380 := factory379.GetProtocol(mbTrans377)
    argvalue0 := meta.NewCreateSpaceReq()
    err381 := argvalue0.Read(jsProt380)
    if err381 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSpace(value0))
    fmt.Print("\n")
    break
  case "dropSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSpace requires 1 args")
      flag.Usage()
    }
    arg382 := flag.Arg(1)
    mbTrans383 := thrift.NewMemoryBufferLen(len(arg382))
    defer mbTrans383.Close()
    _, err384 := mbTrans383.WriteString(arg382)
    if err384 != nil {
      Usage()
      return
    }
    factory385 := thrift.NewSimpleJSONProtocolFactory()
    jsProt386 := factory385.GetProtocol(mbTrans383)
    argvalue0 := meta.NewDropSpaceReq()
    err387 := argvalue0.Read(jsProt386)
    if err387 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSpace(value0))
    fmt.Print("\n")
    break
  case "getSpace":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetSpace requires 1 args")
      flag.Usage()
    }
    arg388 := flag.Arg(1)
    mbTrans389 := thrift.NewMemoryBufferLen(len(arg388))
    defer mbTrans389.Close()
    _, err390 := mbTrans389.WriteString(arg388)
    if err390 != nil {
      Usage()
      return
    }
    factory391 := thrift.NewSimpleJSONProtocolFactory()
    jsProt392 := factory391.GetProtocol(mbTrans389)
    argvalue0 := meta.NewGetSpaceReq()
    err393 := argvalue0.Read(jsProt392)
    if err393 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetSpace(value0))
    fmt.Print("\n")
    break
  case "listSpaces":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSpaces requires 1 args")
      flag.Usage()
    }
    arg394 := flag.Arg(1)
    mbTrans395 := thrift.NewMemoryBufferLen(len(arg394))
    defer mbTrans395.Close()
    _, err396 := mbTrans395.WriteString(arg394)
    if err396 != nil {
      Usage()
      return
    }
    factory397 := thrift.NewSimpleJSONProtocolFactory()
    jsProt398 := factory397.GetProtocol(mbTrans395)
    argvalue0 := meta.NewListSpacesReq()
    err399 := argvalue0.Read(jsProt398)
    if err399 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSpaces(value0))
    fmt.Print("\n")
    break
  case "createTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTag requires 1 args")
      flag.Usage()
    }
    arg400 := flag.Arg(1)
    mbTrans401 := thrift.NewMemoryBufferLen(len(arg400))
    defer mbTrans401.Close()
    _, err402 := mbTrans401.WriteString(arg400)
    if err402 != nil {
      Usage()
      return
    }
    factory403 := thrift.NewSimpleJSONProtocolFactory()
    jsProt404 := factory403.GetProtocol(mbTrans401)
    argvalue0 := meta.NewCreateTagReq()
    err405 := argvalue0.Read(jsProt404)
    if err405 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTag(value0))
    fmt.Print("\n")
    break
  case "alterTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterTag requires 1 args")
      flag.Usage()
    }
    arg406 := flag.Arg(1)
    mbTrans407 := thrift.NewMemoryBufferLen(len(arg406))
    defer mbTrans407.Close()
    _, err408 := mbTrans407.WriteString(arg406)
    if err408 != nil {
      Usage()
      return
    }
    factory409 := thrift.NewSimpleJSONProtocolFactory()
    jsProt410 := factory409.GetProtocol(mbTrans407)
    argvalue0 := meta.NewAlterTagReq()
    err411 := argvalue0.Read(jsProt410)
    if err411 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterTag(value0))
    fmt.Print("\n")
    break
  case "dropTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTag requires 1 args")
      flag.Usage()
    }
    arg412 := flag.Arg(1)
    mbTrans413 := thrift.NewMemoryBufferLen(len(arg412))
    defer mbTrans413.Close()
    _, err414 := mbTrans413.WriteString(arg412)
    if err414 != nil {
      Usage()
      return
    }
    factory415 := thrift.NewSimpleJSONProtocolFactory()
    jsProt416 := factory415.GetProtocol(mbTrans413)
    argvalue0 := meta.NewDropTagReq()
    err417 := argvalue0.Read(jsProt416)
    if err417 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTag(value0))
    fmt.Print("\n")
    break
  case "getTag":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTag requires 1 args")
      flag.Usage()
    }
    arg418 := flag.Arg(1)
    mbTrans419 := thrift.NewMemoryBufferLen(len(arg418))
    defer mbTrans419.Close()
    _, err420 := mbTrans419.WriteString(arg418)
    if err420 != nil {
      Usage()
      return
    }
    factory421 := thrift.NewSimpleJSONProtocolFactory()
    jsProt422 := factory421.GetProtocol(mbTrans419)
    argvalue0 := meta.NewGetTagReq()
    err423 := argvalue0.Read(jsProt422)
    if err423 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTag(value0))
    fmt.Print("\n")
    break
  case "listTags":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTags requires 1 args")
      flag.Usage()
    }
    arg424 := flag.Arg(1)
    mbTrans425 := thrift.NewMemoryBufferLen(len(arg424))
    defer mbTrans425.Close()
    _, err426 := mbTrans425.WriteString(arg424)
    if err426 != nil {
      Usage()
      return
    }
    factory427 := thrift.NewSimpleJSONProtocolFactory()
    jsProt428 := factory427.GetProtocol(mbTrans425)
    argvalue0 := meta.NewListTagsReq()
    err429 := argvalue0.Read(jsProt428)
    if err429 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTags(value0))
    fmt.Print("\n")
    break
  case "createEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateEdge requires 1 args")
      flag.Usage()
    }
    arg430 := flag.Arg(1)
    mbTrans431 := thrift.NewMemoryBufferLen(len(arg430))
    defer mbTrans431.Close()
    _, err432 := mbTrans431.WriteString(arg430)
    if err432 != nil {
      Usage()
      return
    }
    factory433 := thrift.NewSimpleJSONProtocolFactory()
    jsProt434 := factory433.GetProtocol(mbTrans431)
    argvalue0 := meta.NewCreateEdgeReq()
    err435 := argvalue0.Read(jsProt434)
    if err435 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateEdge(value0))
    fmt.Print("\n")
    break
  case "alterEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterEdge requires 1 args")
      flag.Usage()
    }
    arg436 := flag.Arg(1)
    mbTrans437 := thrift.NewMemoryBufferLen(len(arg436))
    defer mbTrans437.Close()
    _, err438 := mbTrans437.WriteString(arg436)
    if err438 != nil {
      Usage()
      return
    }
    factory439 := thrift.NewSimpleJSONProtocolFactory()
    jsProt440 := factory439.GetProtocol(mbTrans437)
    argvalue0 := meta.NewAlterEdgeReq()
    err441 := argvalue0.Read(jsProt440)
    if err441 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterEdge(value0))
    fmt.Print("\n")
    break
  case "dropEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropEdge requires 1 args")
      flag.Usage()
    }
    arg442 := flag.Arg(1)
    mbTrans443 := thrift.NewMemoryBufferLen(len(arg442))
    defer mbTrans443.Close()
    _, err444 := mbTrans443.WriteString(arg442)
    if err444 != nil {
      Usage()
      return
    }
    factory445 := thrift.NewSimpleJSONProtocolFactory()
    jsProt446 := factory445.GetProtocol(mbTrans443)
    argvalue0 := meta.NewDropEdgeReq()
    err447 := argvalue0.Read(jsProt446)
    if err447 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropEdge(value0))
    fmt.Print("\n")
    break
  case "getEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdge requires 1 args")
      flag.Usage()
    }
    arg448 := flag.Arg(1)
    mbTrans449 := thrift.NewMemoryBufferLen(len(arg448))
    defer mbTrans449.Close()
    _, err450 := mbTrans449.WriteString(arg448)
    if err450 != nil {
      Usage()
      return
    }
    factory451 := thrift.NewSimpleJSONProtocolFactory()
    jsProt452 := factory451.GetProtocol(mbTrans449)
    argvalue0 := meta.NewGetEdgeReq()
    err453 := argvalue0.Read(jsProt452)
    if err453 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdge(value0))
    fmt.Print("\n")
    break
  case "listEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdges requires 1 args")
      flag.Usage()
    }
    arg454 := flag.Arg(1)
    mbTrans455 := thrift.NewMemoryBufferLen(len(arg454))
    defer mbTrans455.Close()
    _, err456 := mbTrans455.WriteString(arg454)
    if err456 != nil {
      Usage()
      return
    }
    factory457 := thrift.NewSimpleJSONProtocolFactory()
    jsProt458 := factory457.GetProtocol(mbTrans455)
    argvalue0 := meta.NewListEdgesReq()
    err459 := argvalue0.Read(jsProt458)
    if err459 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdges(value0))
    fmt.Print("\n")
    break
  case "listHosts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListHosts requires 1 args")
      flag.Usage()
    }
    arg460 := flag.Arg(1)
    mbTrans461 := thrift.NewMemoryBufferLen(len(arg460))
    defer mbTrans461.Close()
    _, err462 := mbTrans461.WriteString(arg460)
    if err462 != nil {
      Usage()
      return
    }
    factory463 := thrift.NewSimpleJSONProtocolFactory()
    jsProt464 := factory463.GetProtocol(mbTrans461)
    argvalue0 := meta.NewListHostsReq()
    err465 := argvalue0.Read(jsProt464)
    if err465 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListHosts(value0))
    fmt.Print("\n")
    break
  case "getPartsAlloc":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetPartsAlloc requires 1 args")
      flag.Usage()
    }
    arg466 := flag.Arg(1)
    mbTrans467 := thrift.NewMemoryBufferLen(len(arg466))
    defer mbTrans467.Close()
    _, err468 := mbTrans467.WriteString(arg466)
    if err468 != nil {
      Usage()
      return
    }
    factory469 := thrift.NewSimpleJSONProtocolFactory()
    jsProt470 := factory469.GetProtocol(mbTrans467)
    argvalue0 := meta.NewGetPartsAllocReq()
    err471 := argvalue0.Read(jsProt470)
    if err471 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetPartsAlloc(value0))
    fmt.Print("\n")
    break
  case "listParts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListParts requires 1 args")
      flag.Usage()
    }
    arg472 := flag.Arg(1)
    mbTrans473 := thrift.NewMemoryBufferLen(len(arg472))
    defer mbTrans473.Close()
    _, err474 := mbTrans473.WriteString(arg472)
    if err474 != nil {
      Usage()
      return
    }
    factory475 := thrift.NewSimpleJSONProtocolFactory()
    jsProt476 := factory475.GetProtocol(mbTrans473)
    argvalue0 := meta.NewListPartsReq()
    err477 := argvalue0.Read(jsProt476)
    if err477 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListParts(value0))
    fmt.Print("\n")
    break
  case "multiPut":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiPut requires 1 args")
      flag.Usage()
    }
    arg478 := flag.Arg(1)
    mbTrans479 := thrift.NewMemoryBufferLen(len(arg478))
    defer mbTrans479.Close()
    _, err480 := mbTrans479.WriteString(arg478)
    if err480 != nil {
      Usage()
      return
    }
    factory481 := thrift.NewSimpleJSONProtocolFactory()
    jsProt482 := factory481.GetProtocol(mbTrans479)
    argvalue0 := meta.NewMultiPutReq()
    err483 := argvalue0.Read(jsProt482)
    if err483 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiPut(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    arg484 := flag.Arg(1)
    mbTrans485 := thrift.NewMemoryBufferLen(len(arg484))
    defer mbTrans485.Close()
    _, err486 := mbTrans485.WriteString(arg484)
    if err486 != nil {
      Usage()
      return
    }
    factory487 := thrift.NewSimpleJSONProtocolFactory()
    jsProt488 := factory487.GetProtocol(mbTrans485)
    argvalue0 := meta.NewGetReq()
    err489 := argvalue0.Read(jsProt488)
    if err489 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Get(value0))
    fmt.Print("\n")
    break
  case "multiGet":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MultiGet requires 1 args")
      flag.Usage()
    }
    arg490 := flag.Arg(1)
    mbTrans491 := thrift.NewMemoryBufferLen(len(arg490))
    defer mbTrans491.Close()
    _, err492 := mbTrans491.WriteString(arg490)
    if err492 != nil {
      Usage()
      return
    }
    factory493 := thrift.NewSimpleJSONProtocolFactory()
    jsProt494 := factory493.GetProtocol(mbTrans491)
    argvalue0 := meta.NewMultiGetReq()
    err495 := argvalue0.Read(jsProt494)
    if err495 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MultiGet(value0))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Remove requires 1 args")
      flag.Usage()
    }
    arg496 := flag.Arg(1)
    mbTrans497 := thrift.NewMemoryBufferLen(len(arg496))
    defer mbTrans497.Close()
    _, err498 := mbTrans497.WriteString(arg496)
    if err498 != nil {
      Usage()
      return
    }
    factory499 := thrift.NewSimpleJSONProtocolFactory()
    jsProt500 := factory499.GetProtocol(mbTrans497)
    argvalue0 := meta.NewRemoveReq()
    err501 := argvalue0.Read(jsProt500)
    if err501 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Remove(value0))
    fmt.Print("\n")
    break
  case "removeRange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveRange requires 1 args")
      flag.Usage()
    }
    arg502 := flag.Arg(1)
    mbTrans503 := thrift.NewMemoryBufferLen(len(arg502))
    defer mbTrans503.Close()
    _, err504 := mbTrans503.WriteString(arg502)
    if err504 != nil {
      Usage()
      return
    }
    factory505 := thrift.NewSimpleJSONProtocolFactory()
    jsProt506 := factory505.GetProtocol(mbTrans503)
    argvalue0 := meta.NewRemoveRangeReq()
    err507 := argvalue0.Read(jsProt506)
    if err507 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveRange(value0))
    fmt.Print("\n")
    break
  case "scan":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Scan requires 1 args")
      flag.Usage()
    }
    arg508 := flag.Arg(1)
    mbTrans509 := thrift.NewMemoryBufferLen(len(arg508))
    defer mbTrans509.Close()
    _, err510 := mbTrans509.WriteString(arg508)
    if err510 != nil {
      Usage()
      return
    }
    factory511 := thrift.NewSimpleJSONProtocolFactory()
    jsProt512 := factory511.GetProtocol(mbTrans509)
    argvalue0 := meta.NewScanReq()
    err513 := argvalue0.Read(jsProt512)
    if err513 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Scan(value0))
    fmt.Print("\n")
    break
  case "createTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateTagIndex requires 1 args")
      flag.Usage()
    }
    arg514 := flag.Arg(1)
    mbTrans515 := thrift.NewMemoryBufferLen(len(arg514))
    defer mbTrans515.Close()
    _, err516 := mbTrans515.WriteString(arg514)
    if err516 != nil {
      Usage()
      return
    }
    factory517 := thrift.NewSimpleJSONProtocolFactory()
    jsProt518 := factory517.GetProtocol(mbTrans515)
    argvalue0 := meta.NewCreateTagIndexReq()
    err519 := argvalue0.Read(jsProt518)
    if err519 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateTagIndex(value0))
    fmt.Print("\n")
    break
  case "dropTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropTagIndex requires 1 args")
      flag.Usage()
    }
    arg520 := flag.Arg(1)
    mbTrans521 := thrift.NewMemoryBufferLen(len(arg520))
    defer mbTrans521.Close()
    _, err522 := mbTrans521.WriteString(arg520)
    if err522 != nil {
      Usage()
      return
    }
    factory523 := thrift.NewSimpleJSONProtocolFactory()
    jsProt524 := factory523.GetProtocol(mbTrans521)
    argvalue0 := meta.NewDropTagIndexReq()
    err525 := argvalue0.Read(jsProt524)
    if err525 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropTagIndex(value0))
    fmt.Print("\n")
    break
  case "getTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetTagIndex requires 1 args")
      flag.Usage()
    }
    arg526 := flag.Arg(1)
    mbTrans527 := thrift.NewMemoryBufferLen(len(arg526))
    defer mbTrans527.Close()
    _, err528 := mbTrans527.WriteString(arg526)
    if err528 != nil {
      Usage()
      return
    }
    factory529 := thrift.NewSimpleJSONProtocolFactory()
    jsProt530 := factory529.GetProtocol(mbTrans527)
    argvalue0 := meta.NewGetTagIndexReq()
    err531 := argvalue0.Read(jsProt530)
    if err531 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetTagIndex(value0))
    fmt.Print("\n")
    break
  case "listTagIndexes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTagIndexes requires 1 args")
      flag.Usage()
    }
    arg532 := flag.Arg(1)
    mbTrans533 := thrift.NewMemoryBufferLen(len(arg532))
    defer mbTrans533.Close()
    _, err534 := mbTrans533.WriteString(arg532)
    if err534 != nil {
      Usage()
      return
    }
    factory535 := thrift.NewSimpleJSONProtocolFactory()
    jsProt536 := factory535.GetProtocol(mbTrans533)
    argvalue0 := meta.NewListTagIndexesReq()
    err537 := argvalue0.Read(jsProt536)
    if err537 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTagIndexes(value0))
    fmt.Print("\n")
    break
  case "rebuildTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildTagIndex requires 1 args")
      flag.Usage()
    }
    arg538 := flag.Arg(1)
    mbTrans539 := thrift.NewMemoryBufferLen(len(arg538))
    defer mbTrans539.Close()
    _, err540 := mbTrans539.WriteString(arg538)
    if err540 != nil {
      Usage()
      return
    }
    factory541 := thrift.NewSimpleJSONProtocolFactory()
    jsProt542 := factory541.GetProtocol(mbTrans539)
    argvalue0 := meta.NewRebuildIndexReq()
    err543 := argvalue0.Read(jsProt542)
    if err543 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildTagIndex(value0))
    fmt.Print("\n")
    break
  case "listTagIndexStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListTagIndexStatus requires 1 args")
      flag.Usage()
    }
    arg544 := flag.Arg(1)
    mbTrans545 := thrift.NewMemoryBufferLen(len(arg544))
    defer mbTrans545.Close()
    _, err546 := mbTrans545.WriteString(arg544)
    if err546 != nil {
      Usage()
      return
    }
    factory547 := thrift.NewSimpleJSONProtocolFactory()
    jsProt548 := factory547.GetProtocol(mbTrans545)
    argvalue0 := meta.NewListIndexStatusReq()
    err549 := argvalue0.Read(jsProt548)
    if err549 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListTagIndexStatus(value0))
    fmt.Print("\n")
    break
  case "createEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg550 := flag.Arg(1)
    mbTrans551 := thrift.NewMemoryBufferLen(len(arg550))
    defer mbTrans551.Close()
    _, err552 := mbTrans551.WriteString(arg550)
    if err552 != nil {
      Usage()
      return
    }
    factory553 := thrift.NewSimpleJSONProtocolFactory()
    jsProt554 := factory553.GetProtocol(mbTrans551)
    argvalue0 := meta.NewCreateEdgeIndexReq()
    err555 := argvalue0.Read(jsProt554)
    if err555 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "dropEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg556 := flag.Arg(1)
    mbTrans557 := thrift.NewMemoryBufferLen(len(arg556))
    defer mbTrans557.Close()
    _, err558 := mbTrans557.WriteString(arg556)
    if err558 != nil {
      Usage()
      return
    }
    factory559 := thrift.NewSimpleJSONProtocolFactory()
    jsProt560 := factory559.GetProtocol(mbTrans557)
    argvalue0 := meta.NewDropEdgeIndexReq()
    err561 := argvalue0.Read(jsProt560)
    if err561 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "getEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg562 := flag.Arg(1)
    mbTrans563 := thrift.NewMemoryBufferLen(len(arg562))
    defer mbTrans563.Close()
    _, err564 := mbTrans563.WriteString(arg562)
    if err564 != nil {
      Usage()
      return
    }
    factory565 := thrift.NewSimpleJSONProtocolFactory()
    jsProt566 := factory565.GetProtocol(mbTrans563)
    argvalue0 := meta.NewGetEdgeIndexReq()
    err567 := argvalue0.Read(jsProt566)
    if err567 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "listEdgeIndexes":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdgeIndexes requires 1 args")
      flag.Usage()
    }
    arg568 := flag.Arg(1)
    mbTrans569 := thrift.NewMemoryBufferLen(len(arg568))
    defer mbTrans569.Close()
    _, err570 := mbTrans569.WriteString(arg568)
    if err570 != nil {
      Usage()
      return
    }
    factory571 := thrift.NewSimpleJSONProtocolFactory()
    jsProt572 := factory571.GetProtocol(mbTrans569)
    argvalue0 := meta.NewListEdgeIndexesReq()
    err573 := argvalue0.Read(jsProt572)
    if err573 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdgeIndexes(value0))
    fmt.Print("\n")
    break
  case "rebuildEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg574 := flag.Arg(1)
    mbTrans575 := thrift.NewMemoryBufferLen(len(arg574))
    defer mbTrans575.Close()
    _, err576 := mbTrans575.WriteString(arg574)
    if err576 != nil {
      Usage()
      return
    }
    factory577 := thrift.NewSimpleJSONProtocolFactory()
    jsProt578 := factory577.GetProtocol(mbTrans575)
    argvalue0 := meta.NewRebuildIndexReq()
    err579 := argvalue0.Read(jsProt578)
    if err579 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "listEdgeIndexStatus":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListEdgeIndexStatus requires 1 args")
      flag.Usage()
    }
    arg580 := flag.Arg(1)
    mbTrans581 := thrift.NewMemoryBufferLen(len(arg580))
    defer mbTrans581.Close()
    _, err582 := mbTrans581.WriteString(arg580)
    if err582 != nil {
      Usage()
      return
    }
    factory583 := thrift.NewSimpleJSONProtocolFactory()
    jsProt584 := factory583.GetProtocol(mbTrans581)
    argvalue0 := meta.NewListIndexStatusReq()
    err585 := argvalue0.Read(jsProt584)
    if err585 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListEdgeIndexStatus(value0))
    fmt.Print("\n")
    break
  case "createUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateUser requires 1 args")
      flag.Usage()
    }
    arg586 := flag.Arg(1)
    mbTrans587 := thrift.NewMemoryBufferLen(len(arg586))
    defer mbTrans587.Close()
    _, err588 := mbTrans587.WriteString(arg586)
    if err588 != nil {
      Usage()
      return
    }
    factory589 := thrift.NewSimpleJSONProtocolFactory()
    jsProt590 := factory589.GetProtocol(mbTrans587)
    argvalue0 := meta.NewCreateUserReq()
    err591 := argvalue0.Read(jsProt590)
    if err591 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateUser(value0))
    fmt.Print("\n")
    break
  case "dropUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropUser requires 1 args")
      flag.Usage()
    }
    arg592 := flag.Arg(1)
    mbTrans593 := thrift.NewMemoryBufferLen(len(arg592))
    defer mbTrans593.Close()
    _, err594 := mbTrans593.WriteString(arg592)
    if err594 != nil {
      Usage()
      return
    }
    factory595 := thrift.NewSimpleJSONProtocolFactory()
    jsProt596 := factory595.GetProtocol(mbTrans593)
    argvalue0 := meta.NewDropUserReq()
    err597 := argvalue0.Read(jsProt596)
    if err597 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropUser(value0))
    fmt.Print("\n")
    break
  case "alterUser":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AlterUser requires 1 args")
      flag.Usage()
    }
    arg598 := flag.Arg(1)
    mbTrans599 := thrift.NewMemoryBufferLen(len(arg598))
    defer mbTrans599.Close()
    _, err600 := mbTrans599.WriteString(arg598)
    if err600 != nil {
      Usage()
      return
    }
    factory601 := thrift.NewSimpleJSONProtocolFactory()
    jsProt602 := factory601.GetProtocol(mbTrans599)
    argvalue0 := meta.NewAlterUserReq()
    err603 := argvalue0.Read(jsProt602)
    if err603 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AlterUser(value0))
    fmt.Print("\n")
    break
  case "grantRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GrantRole requires 1 args")
      flag.Usage()
    }
    arg604 := flag.Arg(1)
    mbTrans605 := thrift.NewMemoryBufferLen(len(arg604))
    defer mbTrans605.Close()
    _, err606 := mbTrans605.WriteString(arg604)
    if err606 != nil {
      Usage()
      return
    }
    factory607 := thrift.NewSimpleJSONProtocolFactory()
    jsProt608 := factory607.GetProtocol(mbTrans605)
    argvalue0 := meta.NewGrantRoleReq()
    err609 := argvalue0.Read(jsProt608)
    if err609 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GrantRole(value0))
    fmt.Print("\n")
    break
  case "revokeRole":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RevokeRole requires 1 args")
      flag.Usage()
    }
    arg610 := flag.Arg(1)
    mbTrans611 := thrift.NewMemoryBufferLen(len(arg610))
    defer mbTrans611.Close()
    _, err612 := mbTrans611.WriteString(arg610)
    if err612 != nil {
      Usage()
      return
    }
    factory613 := thrift.NewSimpleJSONProtocolFactory()
    jsProt614 := factory613.GetProtocol(mbTrans611)
    argvalue0 := meta.NewRevokeRoleReq()
    err615 := argvalue0.Read(jsProt614)
    if err615 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RevokeRole(value0))
    fmt.Print("\n")
    break
  case "listUsers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListUsers requires 1 args")
      flag.Usage()
    }
    arg616 := flag.Arg(1)
    mbTrans617 := thrift.NewMemoryBufferLen(len(arg616))
    defer mbTrans617.Close()
    _, err618 := mbTrans617.WriteString(arg616)
    if err618 != nil {
      Usage()
      return
    }
    factory619 := thrift.NewSimpleJSONProtocolFactory()
    jsProt620 := factory619.GetProtocol(mbTrans617)
    argvalue0 := meta.NewListUsersReq()
    err621 := argvalue0.Read(jsProt620)
    if err621 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListUsers(value0))
    fmt.Print("\n")
    break
  case "listRoles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListRoles requires 1 args")
      flag.Usage()
    }
    arg622 := flag.Arg(1)
    mbTrans623 := thrift.NewMemoryBufferLen(len(arg622))
    defer mbTrans623.Close()
    _, err624 := mbTrans623.WriteString(arg622)
    if err624 != nil {
      Usage()
      return
    }
    factory625 := thrift.NewSimpleJSONProtocolFactory()
    jsProt626 := factory625.GetProtocol(mbTrans623)
    argvalue0 := meta.NewListRolesReq()
    err627 := argvalue0.Read(jsProt626)
    if err627 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListRoles(value0))
    fmt.Print("\n")
    break
  case "getUserRoles":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUserRoles requires 1 args")
      flag.Usage()
    }
    arg628 := flag.Arg(1)
    mbTrans629 := thrift.NewMemoryBufferLen(len(arg628))
    defer mbTrans629.Close()
    _, err630 := mbTrans629.WriteString(arg628)
    if err630 != nil {
      Usage()
      return
    }
    factory631 := thrift.NewSimpleJSONProtocolFactory()
    jsProt632 := factory631.GetProtocol(mbTrans629)
    argvalue0 := meta.NewGetUserRolesReq()
    err633 := argvalue0.Read(jsProt632)
    if err633 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUserRoles(value0))
    fmt.Print("\n")
    break
  case "changePassword":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ChangePassword requires 1 args")
      flag.Usage()
    }
    arg634 := flag.Arg(1)
    mbTrans635 := thrift.NewMemoryBufferLen(len(arg634))
    defer mbTrans635.Close()
    _, err636 := mbTrans635.WriteString(arg634)
    if err636 != nil {
      Usage()
      return
    }
    factory637 := thrift.NewSimpleJSONProtocolFactory()
    jsProt638 := factory637.GetProtocol(mbTrans635)
    argvalue0 := meta.NewChangePasswordReq()
    err639 := argvalue0.Read(jsProt638)
    if err639 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ChangePassword(value0))
    fmt.Print("\n")
    break
  case "heartBeat":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "HeartBeat requires 1 args")
      flag.Usage()
    }
    arg640 := flag.Arg(1)
    mbTrans641 := thrift.NewMemoryBufferLen(len(arg640))
    defer mbTrans641.Close()
    _, err642 := mbTrans641.WriteString(arg640)
    if err642 != nil {
      Usage()
      return
    }
    factory643 := thrift.NewSimpleJSONProtocolFactory()
    jsProt644 := factory643.GetProtocol(mbTrans641)
    argvalue0 := meta.NewHBReq()
    err645 := argvalue0.Read(jsProt644)
    if err645 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.HeartBeat(value0))
    fmt.Print("\n")
    break
  case "balance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Balance requires 1 args")
      flag.Usage()
    }
    arg646 := flag.Arg(1)
    mbTrans647 := thrift.NewMemoryBufferLen(len(arg646))
    defer mbTrans647.Close()
    _, err648 := mbTrans647.WriteString(arg646)
    if err648 != nil {
      Usage()
      return
    }
    factory649 := thrift.NewSimpleJSONProtocolFactory()
    jsProt650 := factory649.GetProtocol(mbTrans647)
    argvalue0 := meta.NewBalanceReq()
    err651 := argvalue0.Read(jsProt650)
    if err651 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Balance(value0))
    fmt.Print("\n")
    break
  case "leaderBalance":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LeaderBalance requires 1 args")
      flag.Usage()
    }
    arg652 := flag.Arg(1)
    mbTrans653 := thrift.NewMemoryBufferLen(len(arg652))
    defer mbTrans653.Close()
    _, err654 := mbTrans653.WriteString(arg652)
    if err654 != nil {
      Usage()
      return
    }
    factory655 := thrift.NewSimpleJSONProtocolFactory()
    jsProt656 := factory655.GetProtocol(mbTrans653)
    argvalue0 := meta.NewLeaderBalanceReq()
    err657 := argvalue0.Read(jsProt656)
    if err657 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LeaderBalance(value0))
    fmt.Print("\n")
    break
  case "regConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RegConfig requires 1 args")
      flag.Usage()
    }
    arg658 := flag.Arg(1)
    mbTrans659 := thrift.NewMemoryBufferLen(len(arg658))
    defer mbTrans659.Close()
    _, err660 := mbTrans659.WriteString(arg658)
    if err660 != nil {
      Usage()
      return
    }
    factory661 := thrift.NewSimpleJSONProtocolFactory()
    jsProt662 := factory661.GetProtocol(mbTrans659)
    argvalue0 := meta.NewRegConfigReq()
    err663 := argvalue0.Read(jsProt662)
    if err663 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RegConfig(value0))
    fmt.Print("\n")
    break
  case "getConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetConfig requires 1 args")
      flag.Usage()
    }
    arg664 := flag.Arg(1)
    mbTrans665 := thrift.NewMemoryBufferLen(len(arg664))
    defer mbTrans665.Close()
    _, err666 := mbTrans665.WriteString(arg664)
    if err666 != nil {
      Usage()
      return
    }
    factory667 := thrift.NewSimpleJSONProtocolFactory()
    jsProt668 := factory667.GetProtocol(mbTrans665)
    argvalue0 := meta.NewGetConfigReq()
    err669 := argvalue0.Read(jsProt668)
    if err669 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetConfig(value0))
    fmt.Print("\n")
    break
  case "setConfig":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SetConfig requires 1 args")
      flag.Usage()
    }
    arg670 := flag.Arg(1)
    mbTrans671 := thrift.NewMemoryBufferLen(len(arg670))
    defer mbTrans671.Close()
    _, err672 := mbTrans671.WriteString(arg670)
    if err672 != nil {
      Usage()
      return
    }
    factory673 := thrift.NewSimpleJSONProtocolFactory()
    jsProt674 := factory673.GetProtocol(mbTrans671)
    argvalue0 := meta.NewSetConfigReq()
    err675 := argvalue0.Read(jsProt674)
    if err675 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SetConfig(value0))
    fmt.Print("\n")
    break
  case "listConfigs":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListConfigs requires 1 args")
      flag.Usage()
    }
    arg676 := flag.Arg(1)
    mbTrans677 := thrift.NewMemoryBufferLen(len(arg676))
    defer mbTrans677.Close()
    _, err678 := mbTrans677.WriteString(arg676)
    if err678 != nil {
      Usage()
      return
    }
    factory679 := thrift.NewSimpleJSONProtocolFactory()
    jsProt680 := factory679.GetProtocol(mbTrans677)
    argvalue0 := meta.NewListConfigsReq()
    err681 := argvalue0.Read(jsProt680)
    if err681 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListConfigs(value0))
    fmt.Print("\n")
    break
  case "createSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateSnapshot requires 1 args")
      flag.Usage()
    }
    arg682 := flag.Arg(1)
    mbTrans683 := thrift.NewMemoryBufferLen(len(arg682))
    defer mbTrans683.Close()
    _, err684 := mbTrans683.WriteString(arg682)
    if err684 != nil {
      Usage()
      return
    }
    factory685 := thrift.NewSimpleJSONProtocolFactory()
    jsProt686 := factory685.GetProtocol(mbTrans683)
    argvalue0 := meta.NewCreateSnapshotReq()
    err687 := argvalue0.Read(jsProt686)
    if err687 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateSnapshot(value0))
    fmt.Print("\n")
    break
  case "dropSnapshot":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropSnapshot requires 1 args")
      flag.Usage()
    }
    arg688 := flag.Arg(1)
    mbTrans689 := thrift.NewMemoryBufferLen(len(arg688))
    defer mbTrans689.Close()
    _, err690 := mbTrans689.WriteString(arg688)
    if err690 != nil {
      Usage()
      return
    }
    factory691 := thrift.NewSimpleJSONProtocolFactory()
    jsProt692 := factory691.GetProtocol(mbTrans689)
    argvalue0 := meta.NewDropSnapshotReq()
    err693 := argvalue0.Read(jsProt692)
    if err693 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropSnapshot(value0))
    fmt.Print("\n")
    break
  case "listSnapshots":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListSnapshots requires 1 args")
      flag.Usage()
    }
    arg694 := flag.Arg(1)
    mbTrans695 := thrift.NewMemoryBufferLen(len(arg694))
    defer mbTrans695.Close()
    _, err696 := mbTrans695.WriteString(arg694)
    if err696 != nil {
      Usage()
      return
    }
    factory697 := thrift.NewSimpleJSONProtocolFactory()
    jsProt698 := factory697.GetProtocol(mbTrans695)
    argvalue0 := meta.NewListSnapshotsReq()
    err699 := argvalue0.Read(jsProt698)
    if err699 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListSnapshots(value0))
    fmt.Print("\n")
    break
  case "runAdminJob":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RunAdminJob requires 1 args")
      flag.Usage()
    }
    arg700 := flag.Arg(1)
    mbTrans701 := thrift.NewMemoryBufferLen(len(arg700))
    defer mbTrans701.Close()
    _, err702 := mbTrans701.WriteString(arg700)
    if err702 != nil {
      Usage()
      return
    }
    factory703 := thrift.NewSimpleJSONProtocolFactory()
    jsProt704 := factory703.GetProtocol(mbTrans701)
    argvalue0 := meta.NewAdminJobReq()
    err705 := argvalue0.Read(jsProt704)
    if err705 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RunAdminJob(value0))
    fmt.Print("\n")
    break
  case "addZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddZone requires 1 args")
      flag.Usage()
    }
    arg706 := flag.Arg(1)
    mbTrans707 := thrift.NewMemoryBufferLen(len(arg706))
    defer mbTrans707.Close()
    _, err708 := mbTrans707.WriteString(arg706)
    if err708 != nil {
      Usage()
      return
    }
    factory709 := thrift.NewSimpleJSONProtocolFactory()
    jsProt710 := factory709.GetProtocol(mbTrans707)
    argvalue0 := meta.NewAddZoneReq()
    err711 := argvalue0.Read(jsProt710)
    if err711 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddZone(value0))
    fmt.Print("\n")
    break
  case "dropZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropZone requires 1 args")
      flag.Usage()
    }
    arg712 := flag.Arg(1)
    mbTrans713 := thrift.NewMemoryBufferLen(len(arg712))
    defer mbTrans713.Close()
    _, err714 := mbTrans713.WriteString(arg712)
    if err714 != nil {
      Usage()
      return
    }
    factory715 := thrift.NewSimpleJSONProtocolFactory()
    jsProt716 := factory715.GetProtocol(mbTrans713)
    argvalue0 := meta.NewDropZoneReq()
    err717 := argvalue0.Read(jsProt716)
    if err717 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropZone(value0))
    fmt.Print("\n")
    break
  case "addHostIntoZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddHostIntoZone requires 1 args")
      flag.Usage()
    }
    arg718 := flag.Arg(1)
    mbTrans719 := thrift.NewMemoryBufferLen(len(arg718))
    defer mbTrans719.Close()
    _, err720 := mbTrans719.WriteString(arg718)
    if err720 != nil {
      Usage()
      return
    }
    factory721 := thrift.NewSimpleJSONProtocolFactory()
    jsProt722 := factory721.GetProtocol(mbTrans719)
    argvalue0 := meta.NewAddHostIntoZoneReq()
    err723 := argvalue0.Read(jsProt722)
    if err723 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddHostIntoZone(value0))
    fmt.Print("\n")
    break
  case "dropHostFromZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropHostFromZone requires 1 args")
      flag.Usage()
    }
    arg724 := flag.Arg(1)
    mbTrans725 := thrift.NewMemoryBufferLen(len(arg724))
    defer mbTrans725.Close()
    _, err726 := mbTrans725.WriteString(arg724)
    if err726 != nil {
      Usage()
      return
    }
    factory727 := thrift.NewSimpleJSONProtocolFactory()
    jsProt728 := factory727.GetProtocol(mbTrans725)
    argvalue0 := meta.NewDropHostFromZoneReq()
    err729 := argvalue0.Read(jsProt728)
    if err729 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropHostFromZone(value0))
    fmt.Print("\n")
    break
  case "getZone":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetZone requires 1 args")
      flag.Usage()
    }
    arg730 := flag.Arg(1)
    mbTrans731 := thrift.NewMemoryBufferLen(len(arg730))
    defer mbTrans731.Close()
    _, err732 := mbTrans731.WriteString(arg730)
    if err732 != nil {
      Usage()
      return
    }
    factory733 := thrift.NewSimpleJSONProtocolFactory()
    jsProt734 := factory733.GetProtocol(mbTrans731)
    argvalue0 := meta.NewGetZoneReq()
    err735 := argvalue0.Read(jsProt734)
    if err735 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetZone(value0))
    fmt.Print("\n")
    break
  case "listZones":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListZones requires 1 args")
      flag.Usage()
    }
    arg736 := flag.Arg(1)
    mbTrans737 := thrift.NewMemoryBufferLen(len(arg736))
    defer mbTrans737.Close()
    _, err738 := mbTrans737.WriteString(arg736)
    if err738 != nil {
      Usage()
      return
    }
    factory739 := thrift.NewSimpleJSONProtocolFactory()
    jsProt740 := factory739.GetProtocol(mbTrans737)
    argvalue0 := meta.NewListZonesReq()
    err741 := argvalue0.Read(jsProt740)
    if err741 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListZones(value0))
    fmt.Print("\n")
    break
  case "addGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddGroup requires 1 args")
      flag.Usage()
    }
    arg742 := flag.Arg(1)
    mbTrans743 := thrift.NewMemoryBufferLen(len(arg742))
    defer mbTrans743.Close()
    _, err744 := mbTrans743.WriteString(arg742)
    if err744 != nil {
      Usage()
      return
    }
    factory745 := thrift.NewSimpleJSONProtocolFactory()
    jsProt746 := factory745.GetProtocol(mbTrans743)
    argvalue0 := meta.NewAddGroupReq()
    err747 := argvalue0.Read(jsProt746)
    if err747 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddGroup(value0))
    fmt.Print("\n")
    break
  case "dropGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropGroup requires 1 args")
      flag.Usage()
    }
    arg748 := flag.Arg(1)
    mbTrans749 := thrift.NewMemoryBufferLen(len(arg748))
    defer mbTrans749.Close()
    _, err750 := mbTrans749.WriteString(arg748)
    if err750 != nil {
      Usage()
      return
    }
    factory751 := thrift.NewSimpleJSONProtocolFactory()
    jsProt752 := factory751.GetProtocol(mbTrans749)
    argvalue0 := meta.NewDropGroupReq()
    err753 := argvalue0.Read(jsProt752)
    if err753 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropGroup(value0))
    fmt.Print("\n")
    break
  case "addZoneIntoGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddZoneIntoGroup requires 1 args")
      flag.Usage()
    }
    arg754 := flag.Arg(1)
    mbTrans755 := thrift.NewMemoryBufferLen(len(arg754))
    defer mbTrans755.Close()
    _, err756 := mbTrans755.WriteString(arg754)
    if err756 != nil {
      Usage()
      return
    }
    factory757 := thrift.NewSimpleJSONProtocolFactory()
    jsProt758 := factory757.GetProtocol(mbTrans755)
    argvalue0 := meta.NewAddZoneIntoGroupReq()
    err759 := argvalue0.Read(jsProt758)
    if err759 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddZoneIntoGroup(value0))
    fmt.Print("\n")
    break
  case "dropZoneFromGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropZoneFromGroup requires 1 args")
      flag.Usage()
    }
    arg760 := flag.Arg(1)
    mbTrans761 := thrift.NewMemoryBufferLen(len(arg760))
    defer mbTrans761.Close()
    _, err762 := mbTrans761.WriteString(arg760)
    if err762 != nil {
      Usage()
      return
    }
    factory763 := thrift.NewSimpleJSONProtocolFactory()
    jsProt764 := factory763.GetProtocol(mbTrans761)
    argvalue0 := meta.NewDropZoneFromGroupReq()
    err765 := argvalue0.Read(jsProt764)
    if err765 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropZoneFromGroup(value0))
    fmt.Print("\n")
    break
  case "getGroup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetGroup requires 1 args")
      flag.Usage()
    }
    arg766 := flag.Arg(1)
    mbTrans767 := thrift.NewMemoryBufferLen(len(arg766))
    defer mbTrans767.Close()
    _, err768 := mbTrans767.WriteString(arg766)
    if err768 != nil {
      Usage()
      return
    }
    factory769 := thrift.NewSimpleJSONProtocolFactory()
    jsProt770 := factory769.GetProtocol(mbTrans767)
    argvalue0 := meta.NewGetGroupReq()
    err771 := argvalue0.Read(jsProt770)
    if err771 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetGroup(value0))
    fmt.Print("\n")
    break
  case "listGroups":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListGroups requires 1 args")
      flag.Usage()
    }
    arg772 := flag.Arg(1)
    mbTrans773 := thrift.NewMemoryBufferLen(len(arg772))
    defer mbTrans773.Close()
    _, err774 := mbTrans773.WriteString(arg772)
    if err774 != nil {
      Usage()
      return
    }
    factory775 := thrift.NewSimpleJSONProtocolFactory()
    jsProt776 := factory775.GetProtocol(mbTrans773)
    argvalue0 := meta.NewListGroupsReq()
    err777 := argvalue0.Read(jsProt776)
    if err777 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListGroups(value0))
    fmt.Print("\n")
    break
  case "createBackup":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateBackup requires 1 args")
      flag.Usage()
    }
    arg778 := flag.Arg(1)
    mbTrans779 := thrift.NewMemoryBufferLen(len(arg778))
    defer mbTrans779.Close()
    _, err780 := mbTrans779.WriteString(arg778)
    if err780 != nil {
      Usage()
      return
    }
    factory781 := thrift.NewSimpleJSONProtocolFactory()
    jsProt782 := factory781.GetProtocol(mbTrans779)
    argvalue0 := meta.NewCreateBackupReq()
    err783 := argvalue0.Read(jsProt782)
    if err783 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateBackup(value0))
    fmt.Print("\n")
    break
  case "restoreMeta":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RestoreMeta requires 1 args")
      flag.Usage()
    }
    arg784 := flag.Arg(1)
    mbTrans785 := thrift.NewMemoryBufferLen(len(arg784))
    defer mbTrans785.Close()
    _, err786 := mbTrans785.WriteString(arg784)
    if err786 != nil {
      Usage()
      return
    }
    factory787 := thrift.NewSimpleJSONProtocolFactory()
    jsProt788 := factory787.GetProtocol(mbTrans785)
    argvalue0 := meta.NewRestoreMetaReq()
    err789 := argvalue0.Read(jsProt788)
    if err789 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RestoreMeta(value0))
    fmt.Print("\n")
    break
  case "addListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddListener requires 1 args")
      flag.Usage()
    }
    arg790 := flag.Arg(1)
    mbTrans791 := thrift.NewMemoryBufferLen(len(arg790))
    defer mbTrans791.Close()
    _, err792 := mbTrans791.WriteString(arg790)
    if err792 != nil {
      Usage()
      return
    }
    factory793 := thrift.NewSimpleJSONProtocolFactory()
    jsProt794 := factory793.GetProtocol(mbTrans791)
    argvalue0 := meta.NewAddListenerReq()
    err795 := argvalue0.Read(jsProt794)
    if err795 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddListener(value0))
    fmt.Print("\n")
    break
  case "removeListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveListener requires 1 args")
      flag.Usage()
    }
    arg796 := flag.Arg(1)
    mbTrans797 := thrift.NewMemoryBufferLen(len(arg796))
    defer mbTrans797.Close()
    _, err798 := mbTrans797.WriteString(arg796)
    if err798 != nil {
      Usage()
      return
    }
    factory799 := thrift.NewSimpleJSONProtocolFactory()
    jsProt800 := factory799.GetProtocol(mbTrans797)
    argvalue0 := meta.NewRemoveListenerReq()
    err801 := argvalue0.Read(jsProt800)
    if err801 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveListener(value0))
    fmt.Print("\n")
    break
  case "listListener":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListListener requires 1 args")
      flag.Usage()
    }
    arg802 := flag.Arg(1)
    mbTrans803 := thrift.NewMemoryBufferLen(len(arg802))
    defer mbTrans803.Close()
    _, err804 := mbTrans803.WriteString(arg802)
    if err804 != nil {
      Usage()
      return
    }
    factory805 := thrift.NewSimpleJSONProtocolFactory()
    jsProt806 := factory805.GetProtocol(mbTrans803)
    argvalue0 := meta.NewListListenerReq()
    err807 := argvalue0.Read(jsProt806)
    if err807 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListListener(value0))
    fmt.Print("\n")
    break
  case "getStatis":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetStatis requires 1 args")
      flag.Usage()
    }
    arg808 := flag.Arg(1)
    mbTrans809 := thrift.NewMemoryBufferLen(len(arg808))
    defer mbTrans809.Close()
    _, err810 := mbTrans809.WriteString(arg808)
    if err810 != nil {
      Usage()
      return
    }
    factory811 := thrift.NewSimpleJSONProtocolFactory()
    jsProt812 := factory811.GetProtocol(mbTrans809)
    argvalue0 := meta.NewGetStatisReq()
    err813 := argvalue0.Read(jsProt812)
    if err813 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetStatis(value0))
    fmt.Print("\n")
    break
  case "signInFTService":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SignInFTService requires 1 args")
      flag.Usage()
    }
    arg814 := flag.Arg(1)
    mbTrans815 := thrift.NewMemoryBufferLen(len(arg814))
    defer mbTrans815.Close()
    _, err816 := mbTrans815.WriteString(arg814)
    if err816 != nil {
      Usage()
      return
    }
    factory817 := thrift.NewSimpleJSONProtocolFactory()
    jsProt818 := factory817.GetProtocol(mbTrans815)
    argvalue0 := meta.NewSignInFTServiceReq()
    err819 := argvalue0.Read(jsProt818)
    if err819 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SignInFTService(value0))
    fmt.Print("\n")
    break
  case "signOutFTService":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "SignOutFTService requires 1 args")
      flag.Usage()
    }
    arg820 := flag.Arg(1)
    mbTrans821 := thrift.NewMemoryBufferLen(len(arg820))
    defer mbTrans821.Close()
    _, err822 := mbTrans821.WriteString(arg820)
    if err822 != nil {
      Usage()
      return
    }
    factory823 := thrift.NewSimpleJSONProtocolFactory()
    jsProt824 := factory823.GetProtocol(mbTrans821)
    argvalue0 := meta.NewSignOutFTServiceReq()
    err825 := argvalue0.Read(jsProt824)
    if err825 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.SignOutFTService(value0))
    fmt.Print("\n")
    break
  case "listFTClients":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListFTClients requires 1 args")
      flag.Usage()
    }
    arg826 := flag.Arg(1)
    mbTrans827 := thrift.NewMemoryBufferLen(len(arg826))
    defer mbTrans827.Close()
    _, err828 := mbTrans827.WriteString(arg826)
    if err828 != nil {
      Usage()
      return
    }
    factory829 := thrift.NewSimpleJSONProtocolFactory()
    jsProt830 := factory829.GetProtocol(mbTrans827)
    argvalue0 := meta.NewListFTClientsReq()
    err831 := argvalue0.Read(jsProt830)
    if err831 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListFTClients(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
