// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
        "../../github.com/vesoft-inc/nebula-go/nebula/storage"
)

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  AdminExecResp transLeader(TransLeaderReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp addPart(AddPartReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp addLearner(AddLearnerReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp removePart(RemovePartReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp memberChange(MemberChangeReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp waitingForCatchUpData(CatchUpDataReq req)")
  fmt.Fprintln(os.Stderr, "  CreateCPResp createCheckpoint(CreateCPRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp dropCheckpoint(DropCPRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp blockingWrites(BlockingSignRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp rebuildTagIndex(RebuildIndexRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp rebuildEdgeIndex(RebuildIndexRequest req)")
  fmt.Fprintln(os.Stderr, "  GetLeaderPartsResp getLeaderParts(GetLeaderReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp checkPeers(CheckPeersReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp addAdminTask(AddAdminTaskRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp stopAdminTask(StopAdminTaskRequest req)")
  fmt.Fprintln(os.Stderr, "  ListClusterInfoResp listClusterInfo(ListClusterInfoReq req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.Transport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.ProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := storage.NewStorageAdminServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "transLeader":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TransLeader requires 1 args")
      flag.Usage()
    }
    arg280 := flag.Arg(1)
    mbTrans281 := thrift.NewMemoryBufferLen(len(arg280))
    defer mbTrans281.Close()
    _, err282 := mbTrans281.WriteString(arg280)
    if err282 != nil {
      Usage()
      return
    }
    factory283 := thrift.NewSimpleJSONProtocolFactory()
    jsProt284 := factory283.GetProtocol(mbTrans281)
    argvalue0 := storage.NewTransLeaderReq()
    err285 := argvalue0.Read(jsProt284)
    if err285 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TransLeader(value0))
    fmt.Print("\n")
    break
  case "addPart":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPart requires 1 args")
      flag.Usage()
    }
    arg286 := flag.Arg(1)
    mbTrans287 := thrift.NewMemoryBufferLen(len(arg286))
    defer mbTrans287.Close()
    _, err288 := mbTrans287.WriteString(arg286)
    if err288 != nil {
      Usage()
      return
    }
    factory289 := thrift.NewSimpleJSONProtocolFactory()
    jsProt290 := factory289.GetProtocol(mbTrans287)
    argvalue0 := storage.NewAddPartReq()
    err291 := argvalue0.Read(jsProt290)
    if err291 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPart(value0))
    fmt.Print("\n")
    break
  case "addLearner":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddLearner requires 1 args")
      flag.Usage()
    }
    arg292 := flag.Arg(1)
    mbTrans293 := thrift.NewMemoryBufferLen(len(arg292))
    defer mbTrans293.Close()
    _, err294 := mbTrans293.WriteString(arg292)
    if err294 != nil {
      Usage()
      return
    }
    factory295 := thrift.NewSimpleJSONProtocolFactory()
    jsProt296 := factory295.GetProtocol(mbTrans293)
    argvalue0 := storage.NewAddLearnerReq()
    err297 := argvalue0.Read(jsProt296)
    if err297 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddLearner(value0))
    fmt.Print("\n")
    break
  case "removePart":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemovePart requires 1 args")
      flag.Usage()
    }
    arg298 := flag.Arg(1)
    mbTrans299 := thrift.NewMemoryBufferLen(len(arg298))
    defer mbTrans299.Close()
    _, err300 := mbTrans299.WriteString(arg298)
    if err300 != nil {
      Usage()
      return
    }
    factory301 := thrift.NewSimpleJSONProtocolFactory()
    jsProt302 := factory301.GetProtocol(mbTrans299)
    argvalue0 := storage.NewRemovePartReq()
    err303 := argvalue0.Read(jsProt302)
    if err303 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemovePart(value0))
    fmt.Print("\n")
    break
  case "memberChange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MemberChange requires 1 args")
      flag.Usage()
    }
    arg304 := flag.Arg(1)
    mbTrans305 := thrift.NewMemoryBufferLen(len(arg304))
    defer mbTrans305.Close()
    _, err306 := mbTrans305.WriteString(arg304)
    if err306 != nil {
      Usage()
      return
    }
    factory307 := thrift.NewSimpleJSONProtocolFactory()
    jsProt308 := factory307.GetProtocol(mbTrans305)
    argvalue0 := storage.NewMemberChangeReq()
    err309 := argvalue0.Read(jsProt308)
    if err309 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MemberChange(value0))
    fmt.Print("\n")
    break
  case "waitingForCatchUpData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WaitingForCatchUpData requires 1 args")
      flag.Usage()
    }
    arg310 := flag.Arg(1)
    mbTrans311 := thrift.NewMemoryBufferLen(len(arg310))
    defer mbTrans311.Close()
    _, err312 := mbTrans311.WriteString(arg310)
    if err312 != nil {
      Usage()
      return
    }
    factory313 := thrift.NewSimpleJSONProtocolFactory()
    jsProt314 := factory313.GetProtocol(mbTrans311)
    argvalue0 := storage.NewCatchUpDataReq()
    err315 := argvalue0.Read(jsProt314)
    if err315 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.WaitingForCatchUpData(value0))
    fmt.Print("\n")
    break
  case "createCheckpoint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateCheckpoint requires 1 args")
      flag.Usage()
    }
    arg316 := flag.Arg(1)
    mbTrans317 := thrift.NewMemoryBufferLen(len(arg316))
    defer mbTrans317.Close()
    _, err318 := mbTrans317.WriteString(arg316)
    if err318 != nil {
      Usage()
      return
    }
    factory319 := thrift.NewSimpleJSONProtocolFactory()
    jsProt320 := factory319.GetProtocol(mbTrans317)
    argvalue0 := storage.NewCreateCPRequest()
    err321 := argvalue0.Read(jsProt320)
    if err321 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateCheckpoint(value0))
    fmt.Print("\n")
    break
  case "dropCheckpoint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropCheckpoint requires 1 args")
      flag.Usage()
    }
    arg322 := flag.Arg(1)
    mbTrans323 := thrift.NewMemoryBufferLen(len(arg322))
    defer mbTrans323.Close()
    _, err324 := mbTrans323.WriteString(arg322)
    if err324 != nil {
      Usage()
      return
    }
    factory325 := thrift.NewSimpleJSONProtocolFactory()
    jsProt326 := factory325.GetProtocol(mbTrans323)
    argvalue0 := storage.NewDropCPRequest()
    err327 := argvalue0.Read(jsProt326)
    if err327 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropCheckpoint(value0))
    fmt.Print("\n")
    break
  case "blockingWrites":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "BlockingWrites requires 1 args")
      flag.Usage()
    }
    arg328 := flag.Arg(1)
    mbTrans329 := thrift.NewMemoryBufferLen(len(arg328))
    defer mbTrans329.Close()
    _, err330 := mbTrans329.WriteString(arg328)
    if err330 != nil {
      Usage()
      return
    }
    factory331 := thrift.NewSimpleJSONProtocolFactory()
    jsProt332 := factory331.GetProtocol(mbTrans329)
    argvalue0 := storage.NewBlockingSignRequest()
    err333 := argvalue0.Read(jsProt332)
    if err333 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.BlockingWrites(value0))
    fmt.Print("\n")
    break
  case "rebuildTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildTagIndex requires 1 args")
      flag.Usage()
    }
    arg334 := flag.Arg(1)
    mbTrans335 := thrift.NewMemoryBufferLen(len(arg334))
    defer mbTrans335.Close()
    _, err336 := mbTrans335.WriteString(arg334)
    if err336 != nil {
      Usage()
      return
    }
    factory337 := thrift.NewSimpleJSONProtocolFactory()
    jsProt338 := factory337.GetProtocol(mbTrans335)
    argvalue0 := storage.NewRebuildIndexRequest()
    err339 := argvalue0.Read(jsProt338)
    if err339 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildTagIndex(value0))
    fmt.Print("\n")
    break
  case "rebuildEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg340 := flag.Arg(1)
    mbTrans341 := thrift.NewMemoryBufferLen(len(arg340))
    defer mbTrans341.Close()
    _, err342 := mbTrans341.WriteString(arg340)
    if err342 != nil {
      Usage()
      return
    }
    factory343 := thrift.NewSimpleJSONProtocolFactory()
    jsProt344 := factory343.GetProtocol(mbTrans341)
    argvalue0 := storage.NewRebuildIndexRequest()
    err345 := argvalue0.Read(jsProt344)
    if err345 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "getLeaderParts":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLeaderParts requires 1 args")
      flag.Usage()
    }
    arg346 := flag.Arg(1)
    mbTrans347 := thrift.NewMemoryBufferLen(len(arg346))
    defer mbTrans347.Close()
    _, err348 := mbTrans347.WriteString(arg346)
    if err348 != nil {
      Usage()
      return
    }
    factory349 := thrift.NewSimpleJSONProtocolFactory()
    jsProt350 := factory349.GetProtocol(mbTrans347)
    argvalue0 := storage.NewGetLeaderReq()
    err351 := argvalue0.Read(jsProt350)
    if err351 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetLeaderParts(value0))
    fmt.Print("\n")
    break
  case "checkPeers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckPeers requires 1 args")
      flag.Usage()
    }
    arg352 := flag.Arg(1)
    mbTrans353 := thrift.NewMemoryBufferLen(len(arg352))
    defer mbTrans353.Close()
    _, err354 := mbTrans353.WriteString(arg352)
    if err354 != nil {
      Usage()
      return
    }
    factory355 := thrift.NewSimpleJSONProtocolFactory()
    jsProt356 := factory355.GetProtocol(mbTrans353)
    argvalue0 := storage.NewCheckPeersReq()
    err357 := argvalue0.Read(jsProt356)
    if err357 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckPeers(value0))
    fmt.Print("\n")
    break
  case "addAdminTask":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddAdminTask requires 1 args")
      flag.Usage()
    }
    arg358 := flag.Arg(1)
    mbTrans359 := thrift.NewMemoryBufferLen(len(arg358))
    defer mbTrans359.Close()
    _, err360 := mbTrans359.WriteString(arg358)
    if err360 != nil {
      Usage()
      return
    }
    factory361 := thrift.NewSimpleJSONProtocolFactory()
    jsProt362 := factory361.GetProtocol(mbTrans359)
    argvalue0 := storage.NewAddAdminTaskRequest()
    err363 := argvalue0.Read(jsProt362)
    if err363 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddAdminTask(value0))
    fmt.Print("\n")
    break
  case "stopAdminTask":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "StopAdminTask requires 1 args")
      flag.Usage()
    }
    arg364 := flag.Arg(1)
    mbTrans365 := thrift.NewMemoryBufferLen(len(arg364))
    defer mbTrans365.Close()
    _, err366 := mbTrans365.WriteString(arg364)
    if err366 != nil {
      Usage()
      return
    }
    factory367 := thrift.NewSimpleJSONProtocolFactory()
    jsProt368 := factory367.GetProtocol(mbTrans365)
    argvalue0 := storage.NewStopAdminTaskRequest()
    err369 := argvalue0.Read(jsProt368)
    if err369 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.StopAdminTask(value0))
    fmt.Print("\n")
    break
  case "listClusterInfo":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ListClusterInfo requires 1 args")
      flag.Usage()
    }
    arg370 := flag.Arg(1)
    mbTrans371 := thrift.NewMemoryBufferLen(len(arg370))
    defer mbTrans371.Close()
    _, err372 := mbTrans371.WriteString(arg370)
    if err372 != nil {
      Usage()
      return
    }
    factory373 := thrift.NewSimpleJSONProtocolFactory()
    jsProt374 := factory373.GetProtocol(mbTrans371)
    argvalue0 := storage.NewListClusterInfoReq()
    err375 := argvalue0.Read(jsProt374)
    if err375 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ListClusterInfo(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
