// Autogenerated by Thrift Compiler (facebook)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// @generated

package main

import (
        "flag"
        "fmt"
        "math"
        "net"
        "net/url"
        "os"
        "strconv"
        "strings"
        thrift "github.com/facebook/fbthrift/thrift/lib/go/thrift"
        "../../github.com/vesoft-inc/nebula-go/nebula/storage"
)

func Usage() {
  fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
  flag.PrintDefaults()
  fmt.Fprintln(os.Stderr, "\nFunctions:")
  fmt.Fprintln(os.Stderr, "  QueryResponse getBound(GetNeighborsRequest req)")
  fmt.Fprintln(os.Stderr, "  QueryStatsResponse boundStats(GetNeighborsRequest req)")
  fmt.Fprintln(os.Stderr, "  QueryResponse getProps(VertexPropRequest req)")
  fmt.Fprintln(os.Stderr, "  EdgePropResponse getEdgeProps(EdgePropRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse addVertices(AddVerticesRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse addEdges(AddEdgesRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse deleteEdges(DeleteEdgesRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse deleteVertices(DeleteVerticesRequest req)")
  fmt.Fprintln(os.Stderr, "  UpdateResponse updateVertex(UpdateVertexRequest req)")
  fmt.Fprintln(os.Stderr, "  UpdateResponse updateEdge(UpdateEdgeRequest req)")
  fmt.Fprintln(os.Stderr, "  ScanEdgeResponse scanEdge(ScanEdgeRequest req)")
  fmt.Fprintln(os.Stderr, "  ScanVertexResponse scanVertex(ScanVertexRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp transLeader(TransLeaderReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp addPart(AddPartReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp addLearner(AddLearnerReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp waitingForCatchUpData(CatchUpDataReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp removePart(RemovePartReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp memberChange(MemberChangeReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp checkPeers(CheckPeersReq req)")
  fmt.Fprintln(os.Stderr, "  GetLeaderResp getLeaderPart(GetLeaderReq req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp createCheckpoint(CreateCPRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp dropCheckpoint(DropCPRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp blockingWrites(BlockingSignRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp rebuildTagIndex(RebuildIndexRequest req)")
  fmt.Fprintln(os.Stderr, "  AdminExecResp rebuildEdgeIndex(RebuildIndexRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse put(PutRequest req)")
  fmt.Fprintln(os.Stderr, "  GeneralResponse get(GetRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse remove(RemoveRequest req)")
  fmt.Fprintln(os.Stderr, "  ExecResponse removeRange(RemoveRangeRequest req)")
  fmt.Fprintln(os.Stderr, "  GetUUIDResp getUUID(GetUUIDReq req)")
  fmt.Fprintln(os.Stderr, "  LookUpIndexResp lookUpIndex(LookUpIndexRequest req)")
  fmt.Fprintln(os.Stderr)
  os.Exit(0)
}

func main() {
  flag.Usage = Usage
  var host string
  var port int
  var protocol string
  var urlString string
  var framed bool
  var useHttp bool
  var parsedUrl url.URL
  var trans thrift.Transport
  _ = strconv.Atoi
  _ = math.Abs
  flag.Usage = Usage
  flag.StringVar(&host, "h", "localhost", "Specify host")
  flag.IntVar(&port, "p", 9090, "Specify port")
  flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
  flag.StringVar(&urlString, "u", "", "Specify the url")
  flag.BoolVar(&framed, "framed", false, "Use framed transport")
  flag.BoolVar(&useHttp, "http", false, "Use http")
  flag.Parse()
  
  if len(urlString) > 0 {
    parsedUrl, err := url.Parse(urlString)
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
    host = parsedUrl.Host
    useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
  } else if useHttp {
    _, err := url.Parse(fmt.Sprint("http://", host, ":", port))
    if err != nil {
      fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
      flag.Usage()
    }
  }
  
  cmd := flag.Arg(0)
  var err error
  if useHttp {
    trans, err = thrift.NewHTTPPostClient(parsedUrl.String())
  } else {
    portStr := fmt.Sprint(port)
    if strings.Contains(host, ":") {
           host, portStr, err = net.SplitHostPort(host)
           if err != nil {
                   fmt.Fprintln(os.Stderr, "error with host:", err)
                   os.Exit(1)
           }
    }
    trans, err = thrift.NewSocket(thrift.SocketAddr(net.JoinHostPort(host, portStr)))
    if err != nil {
      fmt.Fprintln(os.Stderr, "error resolving address:", err)
      os.Exit(1)
    }
    if framed {
      trans = thrift.NewFramedTransport(trans)
    }
  }
  if err != nil {
    fmt.Fprintln(os.Stderr, "Error creating transport", err)
    os.Exit(1)
  }
  defer trans.Close()
  var protocolFactory thrift.ProtocolFactory
  switch protocol {
  case "compact":
    protocolFactory = thrift.NewCompactProtocolFactory()
    break
  case "simplejson":
    protocolFactory = thrift.NewSimpleJSONProtocolFactory()
    break
  case "json":
    protocolFactory = thrift.NewJSONProtocolFactory()
    break
  case "binary", "":
    protocolFactory = thrift.NewBinaryProtocolFactoryDefault()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
    Usage()
    os.Exit(1)
  }
  client := storage.NewStorageServiceClientFactory(trans, protocolFactory)
  if err := trans.Open(); err != nil {
    fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
    os.Exit(1)
  }
  
  switch cmd {
  case "getBound":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetBound requires 1 args")
      flag.Usage()
    }
    arg206 := flag.Arg(1)
    mbTrans207 := thrift.NewMemoryBufferLen(len(arg206))
    defer mbTrans207.Close()
    _, err208 := mbTrans207.WriteString(arg206)
    if err208 != nil {
      Usage()
      return
    }
    factory209 := thrift.NewSimpleJSONProtocolFactory()
    jsProt210 := factory209.GetProtocol(mbTrans207)
    argvalue0 := storage.NewGetNeighborsRequest()
    err211 := argvalue0.Read(jsProt210)
    if err211 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetBound(value0))
    fmt.Print("\n")
    break
  case "boundStats":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "BoundStats requires 1 args")
      flag.Usage()
    }
    arg212 := flag.Arg(1)
    mbTrans213 := thrift.NewMemoryBufferLen(len(arg212))
    defer mbTrans213.Close()
    _, err214 := mbTrans213.WriteString(arg212)
    if err214 != nil {
      Usage()
      return
    }
    factory215 := thrift.NewSimpleJSONProtocolFactory()
    jsProt216 := factory215.GetProtocol(mbTrans213)
    argvalue0 := storage.NewGetNeighborsRequest()
    err217 := argvalue0.Read(jsProt216)
    if err217 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.BoundStats(value0))
    fmt.Print("\n")
    break
  case "getProps":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetProps requires 1 args")
      flag.Usage()
    }
    arg218 := flag.Arg(1)
    mbTrans219 := thrift.NewMemoryBufferLen(len(arg218))
    defer mbTrans219.Close()
    _, err220 := mbTrans219.WriteString(arg218)
    if err220 != nil {
      Usage()
      return
    }
    factory221 := thrift.NewSimpleJSONProtocolFactory()
    jsProt222 := factory221.GetProtocol(mbTrans219)
    argvalue0 := storage.NewVertexPropRequest()
    err223 := argvalue0.Read(jsProt222)
    if err223 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetProps(value0))
    fmt.Print("\n")
    break
  case "getEdgeProps":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetEdgeProps requires 1 args")
      flag.Usage()
    }
    arg224 := flag.Arg(1)
    mbTrans225 := thrift.NewMemoryBufferLen(len(arg224))
    defer mbTrans225.Close()
    _, err226 := mbTrans225.WriteString(arg224)
    if err226 != nil {
      Usage()
      return
    }
    factory227 := thrift.NewSimpleJSONProtocolFactory()
    jsProt228 := factory227.GetProtocol(mbTrans225)
    argvalue0 := storage.NewEdgePropRequest()
    err229 := argvalue0.Read(jsProt228)
    if err229 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetEdgeProps(value0))
    fmt.Print("\n")
    break
  case "addVertices":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddVertices requires 1 args")
      flag.Usage()
    }
    arg230 := flag.Arg(1)
    mbTrans231 := thrift.NewMemoryBufferLen(len(arg230))
    defer mbTrans231.Close()
    _, err232 := mbTrans231.WriteString(arg230)
    if err232 != nil {
      Usage()
      return
    }
    factory233 := thrift.NewSimpleJSONProtocolFactory()
    jsProt234 := factory233.GetProtocol(mbTrans231)
    argvalue0 := storage.NewAddVerticesRequest()
    err235 := argvalue0.Read(jsProt234)
    if err235 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddVertices(value0))
    fmt.Print("\n")
    break
  case "addEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddEdges requires 1 args")
      flag.Usage()
    }
    arg236 := flag.Arg(1)
    mbTrans237 := thrift.NewMemoryBufferLen(len(arg236))
    defer mbTrans237.Close()
    _, err238 := mbTrans237.WriteString(arg236)
    if err238 != nil {
      Usage()
      return
    }
    factory239 := thrift.NewSimpleJSONProtocolFactory()
    jsProt240 := factory239.GetProtocol(mbTrans237)
    argvalue0 := storage.NewAddEdgesRequest()
    err241 := argvalue0.Read(jsProt240)
    if err241 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddEdges(value0))
    fmt.Print("\n")
    break
  case "deleteEdges":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteEdges requires 1 args")
      flag.Usage()
    }
    arg242 := flag.Arg(1)
    mbTrans243 := thrift.NewMemoryBufferLen(len(arg242))
    defer mbTrans243.Close()
    _, err244 := mbTrans243.WriteString(arg242)
    if err244 != nil {
      Usage()
      return
    }
    factory245 := thrift.NewSimpleJSONProtocolFactory()
    jsProt246 := factory245.GetProtocol(mbTrans243)
    argvalue0 := storage.NewDeleteEdgesRequest()
    err247 := argvalue0.Read(jsProt246)
    if err247 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteEdges(value0))
    fmt.Print("\n")
    break
  case "deleteVertices":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DeleteVertices requires 1 args")
      flag.Usage()
    }
    arg248 := flag.Arg(1)
    mbTrans249 := thrift.NewMemoryBufferLen(len(arg248))
    defer mbTrans249.Close()
    _, err250 := mbTrans249.WriteString(arg248)
    if err250 != nil {
      Usage()
      return
    }
    factory251 := thrift.NewSimpleJSONProtocolFactory()
    jsProt252 := factory251.GetProtocol(mbTrans249)
    argvalue0 := storage.NewDeleteVerticesRequest()
    err253 := argvalue0.Read(jsProt252)
    if err253 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DeleteVertices(value0))
    fmt.Print("\n")
    break
  case "updateVertex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateVertex requires 1 args")
      flag.Usage()
    }
    arg254 := flag.Arg(1)
    mbTrans255 := thrift.NewMemoryBufferLen(len(arg254))
    defer mbTrans255.Close()
    _, err256 := mbTrans255.WriteString(arg254)
    if err256 != nil {
      Usage()
      return
    }
    factory257 := thrift.NewSimpleJSONProtocolFactory()
    jsProt258 := factory257.GetProtocol(mbTrans255)
    argvalue0 := storage.NewUpdateVertexRequest()
    err259 := argvalue0.Read(jsProt258)
    if err259 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateVertex(value0))
    fmt.Print("\n")
    break
  case "updateEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "UpdateEdge requires 1 args")
      flag.Usage()
    }
    arg260 := flag.Arg(1)
    mbTrans261 := thrift.NewMemoryBufferLen(len(arg260))
    defer mbTrans261.Close()
    _, err262 := mbTrans261.WriteString(arg260)
    if err262 != nil {
      Usage()
      return
    }
    factory263 := thrift.NewSimpleJSONProtocolFactory()
    jsProt264 := factory263.GetProtocol(mbTrans261)
    argvalue0 := storage.NewUpdateEdgeRequest()
    err265 := argvalue0.Read(jsProt264)
    if err265 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.UpdateEdge(value0))
    fmt.Print("\n")
    break
  case "scanEdge":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScanEdge requires 1 args")
      flag.Usage()
    }
    arg266 := flag.Arg(1)
    mbTrans267 := thrift.NewMemoryBufferLen(len(arg266))
    defer mbTrans267.Close()
    _, err268 := mbTrans267.WriteString(arg266)
    if err268 != nil {
      Usage()
      return
    }
    factory269 := thrift.NewSimpleJSONProtocolFactory()
    jsProt270 := factory269.GetProtocol(mbTrans267)
    argvalue0 := storage.NewScanEdgeRequest()
    err271 := argvalue0.Read(jsProt270)
    if err271 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScanEdge(value0))
    fmt.Print("\n")
    break
  case "scanVertex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "ScanVertex requires 1 args")
      flag.Usage()
    }
    arg272 := flag.Arg(1)
    mbTrans273 := thrift.NewMemoryBufferLen(len(arg272))
    defer mbTrans273.Close()
    _, err274 := mbTrans273.WriteString(arg272)
    if err274 != nil {
      Usage()
      return
    }
    factory275 := thrift.NewSimpleJSONProtocolFactory()
    jsProt276 := factory275.GetProtocol(mbTrans273)
    argvalue0 := storage.NewScanVertexRequest()
    err277 := argvalue0.Read(jsProt276)
    if err277 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.ScanVertex(value0))
    fmt.Print("\n")
    break
  case "transLeader":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "TransLeader requires 1 args")
      flag.Usage()
    }
    arg278 := flag.Arg(1)
    mbTrans279 := thrift.NewMemoryBufferLen(len(arg278))
    defer mbTrans279.Close()
    _, err280 := mbTrans279.WriteString(arg278)
    if err280 != nil {
      Usage()
      return
    }
    factory281 := thrift.NewSimpleJSONProtocolFactory()
    jsProt282 := factory281.GetProtocol(mbTrans279)
    argvalue0 := storage.NewTransLeaderReq()
    err283 := argvalue0.Read(jsProt282)
    if err283 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.TransLeader(value0))
    fmt.Print("\n")
    break
  case "addPart":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddPart requires 1 args")
      flag.Usage()
    }
    arg284 := flag.Arg(1)
    mbTrans285 := thrift.NewMemoryBufferLen(len(arg284))
    defer mbTrans285.Close()
    _, err286 := mbTrans285.WriteString(arg284)
    if err286 != nil {
      Usage()
      return
    }
    factory287 := thrift.NewSimpleJSONProtocolFactory()
    jsProt288 := factory287.GetProtocol(mbTrans285)
    argvalue0 := storage.NewAddPartReq()
    err289 := argvalue0.Read(jsProt288)
    if err289 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddPart(value0))
    fmt.Print("\n")
    break
  case "addLearner":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "AddLearner requires 1 args")
      flag.Usage()
    }
    arg290 := flag.Arg(1)
    mbTrans291 := thrift.NewMemoryBufferLen(len(arg290))
    defer mbTrans291.Close()
    _, err292 := mbTrans291.WriteString(arg290)
    if err292 != nil {
      Usage()
      return
    }
    factory293 := thrift.NewSimpleJSONProtocolFactory()
    jsProt294 := factory293.GetProtocol(mbTrans291)
    argvalue0 := storage.NewAddLearnerReq()
    err295 := argvalue0.Read(jsProt294)
    if err295 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.AddLearner(value0))
    fmt.Print("\n")
    break
  case "waitingForCatchUpData":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "WaitingForCatchUpData requires 1 args")
      flag.Usage()
    }
    arg296 := flag.Arg(1)
    mbTrans297 := thrift.NewMemoryBufferLen(len(arg296))
    defer mbTrans297.Close()
    _, err298 := mbTrans297.WriteString(arg296)
    if err298 != nil {
      Usage()
      return
    }
    factory299 := thrift.NewSimpleJSONProtocolFactory()
    jsProt300 := factory299.GetProtocol(mbTrans297)
    argvalue0 := storage.NewCatchUpDataReq()
    err301 := argvalue0.Read(jsProt300)
    if err301 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.WaitingForCatchUpData(value0))
    fmt.Print("\n")
    break
  case "removePart":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemovePart requires 1 args")
      flag.Usage()
    }
    arg302 := flag.Arg(1)
    mbTrans303 := thrift.NewMemoryBufferLen(len(arg302))
    defer mbTrans303.Close()
    _, err304 := mbTrans303.WriteString(arg302)
    if err304 != nil {
      Usage()
      return
    }
    factory305 := thrift.NewSimpleJSONProtocolFactory()
    jsProt306 := factory305.GetProtocol(mbTrans303)
    argvalue0 := storage.NewRemovePartReq()
    err307 := argvalue0.Read(jsProt306)
    if err307 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemovePart(value0))
    fmt.Print("\n")
    break
  case "memberChange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "MemberChange requires 1 args")
      flag.Usage()
    }
    arg308 := flag.Arg(1)
    mbTrans309 := thrift.NewMemoryBufferLen(len(arg308))
    defer mbTrans309.Close()
    _, err310 := mbTrans309.WriteString(arg308)
    if err310 != nil {
      Usage()
      return
    }
    factory311 := thrift.NewSimpleJSONProtocolFactory()
    jsProt312 := factory311.GetProtocol(mbTrans309)
    argvalue0 := storage.NewMemberChangeReq()
    err313 := argvalue0.Read(jsProt312)
    if err313 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.MemberChange(value0))
    fmt.Print("\n")
    break
  case "checkPeers":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CheckPeers requires 1 args")
      flag.Usage()
    }
    arg314 := flag.Arg(1)
    mbTrans315 := thrift.NewMemoryBufferLen(len(arg314))
    defer mbTrans315.Close()
    _, err316 := mbTrans315.WriteString(arg314)
    if err316 != nil {
      Usage()
      return
    }
    factory317 := thrift.NewSimpleJSONProtocolFactory()
    jsProt318 := factory317.GetProtocol(mbTrans315)
    argvalue0 := storage.NewCheckPeersReq()
    err319 := argvalue0.Read(jsProt318)
    if err319 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CheckPeers(value0))
    fmt.Print("\n")
    break
  case "getLeaderPart":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetLeaderPart requires 1 args")
      flag.Usage()
    }
    arg320 := flag.Arg(1)
    mbTrans321 := thrift.NewMemoryBufferLen(len(arg320))
    defer mbTrans321.Close()
    _, err322 := mbTrans321.WriteString(arg320)
    if err322 != nil {
      Usage()
      return
    }
    factory323 := thrift.NewSimpleJSONProtocolFactory()
    jsProt324 := factory323.GetProtocol(mbTrans321)
    argvalue0 := storage.NewGetLeaderReq()
    err325 := argvalue0.Read(jsProt324)
    if err325 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetLeaderPart(value0))
    fmt.Print("\n")
    break
  case "createCheckpoint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "CreateCheckpoint requires 1 args")
      flag.Usage()
    }
    arg326 := flag.Arg(1)
    mbTrans327 := thrift.NewMemoryBufferLen(len(arg326))
    defer mbTrans327.Close()
    _, err328 := mbTrans327.WriteString(arg326)
    if err328 != nil {
      Usage()
      return
    }
    factory329 := thrift.NewSimpleJSONProtocolFactory()
    jsProt330 := factory329.GetProtocol(mbTrans327)
    argvalue0 := storage.NewCreateCPRequest()
    err331 := argvalue0.Read(jsProt330)
    if err331 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.CreateCheckpoint(value0))
    fmt.Print("\n")
    break
  case "dropCheckpoint":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "DropCheckpoint requires 1 args")
      flag.Usage()
    }
    arg332 := flag.Arg(1)
    mbTrans333 := thrift.NewMemoryBufferLen(len(arg332))
    defer mbTrans333.Close()
    _, err334 := mbTrans333.WriteString(arg332)
    if err334 != nil {
      Usage()
      return
    }
    factory335 := thrift.NewSimpleJSONProtocolFactory()
    jsProt336 := factory335.GetProtocol(mbTrans333)
    argvalue0 := storage.NewDropCPRequest()
    err337 := argvalue0.Read(jsProt336)
    if err337 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.DropCheckpoint(value0))
    fmt.Print("\n")
    break
  case "blockingWrites":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "BlockingWrites requires 1 args")
      flag.Usage()
    }
    arg338 := flag.Arg(1)
    mbTrans339 := thrift.NewMemoryBufferLen(len(arg338))
    defer mbTrans339.Close()
    _, err340 := mbTrans339.WriteString(arg338)
    if err340 != nil {
      Usage()
      return
    }
    factory341 := thrift.NewSimpleJSONProtocolFactory()
    jsProt342 := factory341.GetProtocol(mbTrans339)
    argvalue0 := storage.NewBlockingSignRequest()
    err343 := argvalue0.Read(jsProt342)
    if err343 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.BlockingWrites(value0))
    fmt.Print("\n")
    break
  case "rebuildTagIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildTagIndex requires 1 args")
      flag.Usage()
    }
    arg344 := flag.Arg(1)
    mbTrans345 := thrift.NewMemoryBufferLen(len(arg344))
    defer mbTrans345.Close()
    _, err346 := mbTrans345.WriteString(arg344)
    if err346 != nil {
      Usage()
      return
    }
    factory347 := thrift.NewSimpleJSONProtocolFactory()
    jsProt348 := factory347.GetProtocol(mbTrans345)
    argvalue0 := storage.NewRebuildIndexRequest()
    err349 := argvalue0.Read(jsProt348)
    if err349 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildTagIndex(value0))
    fmt.Print("\n")
    break
  case "rebuildEdgeIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RebuildEdgeIndex requires 1 args")
      flag.Usage()
    }
    arg350 := flag.Arg(1)
    mbTrans351 := thrift.NewMemoryBufferLen(len(arg350))
    defer mbTrans351.Close()
    _, err352 := mbTrans351.WriteString(arg350)
    if err352 != nil {
      Usage()
      return
    }
    factory353 := thrift.NewSimpleJSONProtocolFactory()
    jsProt354 := factory353.GetProtocol(mbTrans351)
    argvalue0 := storage.NewRebuildIndexRequest()
    err355 := argvalue0.Read(jsProt354)
    if err355 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RebuildEdgeIndex(value0))
    fmt.Print("\n")
    break
  case "put":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Put requires 1 args")
      flag.Usage()
    }
    arg356 := flag.Arg(1)
    mbTrans357 := thrift.NewMemoryBufferLen(len(arg356))
    defer mbTrans357.Close()
    _, err358 := mbTrans357.WriteString(arg356)
    if err358 != nil {
      Usage()
      return
    }
    factory359 := thrift.NewSimpleJSONProtocolFactory()
    jsProt360 := factory359.GetProtocol(mbTrans357)
    argvalue0 := storage.NewPutRequest()
    err361 := argvalue0.Read(jsProt360)
    if err361 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Put(value0))
    fmt.Print("\n")
    break
  case "get":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Get requires 1 args")
      flag.Usage()
    }
    arg362 := flag.Arg(1)
    mbTrans363 := thrift.NewMemoryBufferLen(len(arg362))
    defer mbTrans363.Close()
    _, err364 := mbTrans363.WriteString(arg362)
    if err364 != nil {
      Usage()
      return
    }
    factory365 := thrift.NewSimpleJSONProtocolFactory()
    jsProt366 := factory365.GetProtocol(mbTrans363)
    argvalue0 := storage.NewGetRequest()
    err367 := argvalue0.Read(jsProt366)
    if err367 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Get(value0))
    fmt.Print("\n")
    break
  case "remove":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "Remove requires 1 args")
      flag.Usage()
    }
    arg368 := flag.Arg(1)
    mbTrans369 := thrift.NewMemoryBufferLen(len(arg368))
    defer mbTrans369.Close()
    _, err370 := mbTrans369.WriteString(arg368)
    if err370 != nil {
      Usage()
      return
    }
    factory371 := thrift.NewSimpleJSONProtocolFactory()
    jsProt372 := factory371.GetProtocol(mbTrans369)
    argvalue0 := storage.NewRemoveRequest()
    err373 := argvalue0.Read(jsProt372)
    if err373 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.Remove(value0))
    fmt.Print("\n")
    break
  case "removeRange":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "RemoveRange requires 1 args")
      flag.Usage()
    }
    arg374 := flag.Arg(1)
    mbTrans375 := thrift.NewMemoryBufferLen(len(arg374))
    defer mbTrans375.Close()
    _, err376 := mbTrans375.WriteString(arg374)
    if err376 != nil {
      Usage()
      return
    }
    factory377 := thrift.NewSimpleJSONProtocolFactory()
    jsProt378 := factory377.GetProtocol(mbTrans375)
    argvalue0 := storage.NewRemoveRangeRequest()
    err379 := argvalue0.Read(jsProt378)
    if err379 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.RemoveRange(value0))
    fmt.Print("\n")
    break
  case "getUUID":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "GetUUID requires 1 args")
      flag.Usage()
    }
    arg380 := flag.Arg(1)
    mbTrans381 := thrift.NewMemoryBufferLen(len(arg380))
    defer mbTrans381.Close()
    _, err382 := mbTrans381.WriteString(arg380)
    if err382 != nil {
      Usage()
      return
    }
    factory383 := thrift.NewSimpleJSONProtocolFactory()
    jsProt384 := factory383.GetProtocol(mbTrans381)
    argvalue0 := storage.NewGetUUIDReq()
    err385 := argvalue0.Read(jsProt384)
    if err385 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.GetUUID(value0))
    fmt.Print("\n")
    break
  case "lookUpIndex":
    if flag.NArg() - 1 != 1 {
      fmt.Fprintln(os.Stderr, "LookUpIndex requires 1 args")
      flag.Usage()
    }
    arg386 := flag.Arg(1)
    mbTrans387 := thrift.NewMemoryBufferLen(len(arg386))
    defer mbTrans387.Close()
    _, err388 := mbTrans387.WriteString(arg386)
    if err388 != nil {
      Usage()
      return
    }
    factory389 := thrift.NewSimpleJSONProtocolFactory()
    jsProt390 := factory389.GetProtocol(mbTrans387)
    argvalue0 := storage.NewLookUpIndexRequest()
    err391 := argvalue0.Read(jsProt390)
    if err391 != nil {
      Usage()
      return
    }
    value0 := argvalue0
    fmt.Print(client.LookUpIndex(value0))
    fmt.Print("\n")
    break
  case "":
    Usage()
    break
  default:
    fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
  }
}
